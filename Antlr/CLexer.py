# Generated from Antlr/C.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,351,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
        1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
        1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,167,8,
        10,1,11,1,11,1,11,1,11,3,11,173,8,11,1,12,1,12,1,13,1,13,1,14,1,
        14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,
        21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,
        27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,3,30,215,8,30,1,31,1,
        31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,
        34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,38,3,38,263,8,38,1,38,5,38,266,8,38,10,
        38,12,38,269,9,38,1,39,4,39,272,8,39,11,39,12,39,273,1,40,4,40,277,
        8,40,11,40,12,40,278,1,40,1,40,3,40,283,8,40,1,40,4,40,286,8,40,
        11,40,12,40,287,1,41,1,41,3,41,292,8,41,1,41,1,41,1,41,1,42,1,42,
        5,42,299,8,42,10,42,12,42,302,9,42,1,42,1,42,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,3,43,315,8,43,1,44,1,44,1,44,1,44,5,44,
        321,8,44,10,44,12,44,324,9,44,1,44,3,44,327,8,44,1,45,1,45,1,45,
        1,45,5,45,333,8,45,10,45,12,45,336,9,45,1,45,1,45,1,45,1,46,1,46,
        1,47,4,47,344,8,47,11,47,12,47,345,1,47,1,47,1,48,1,48,2,300,334,
        0,49,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
        46,93,0,95,47,97,48,1,0,6,2,0,60,60,62,62,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,1,0,48,57,3,0,9,10,
        13,13,32,32,367,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
        0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
        0,89,1,0,0,0,0,91,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,1,99,1,0,0,0,
        3,104,1,0,0,0,5,107,1,0,0,0,7,112,1,0,0,0,9,118,1,0,0,0,11,122,1,
        0,0,0,13,128,1,0,0,0,15,137,1,0,0,0,17,144,1,0,0,0,19,151,1,0,0,
        0,21,166,1,0,0,0,23,172,1,0,0,0,25,174,1,0,0,0,27,176,1,0,0,0,29,
        178,1,0,0,0,31,180,1,0,0,0,33,182,1,0,0,0,35,184,1,0,0,0,37,186,
        1,0,0,0,39,188,1,0,0,0,41,190,1,0,0,0,43,192,1,0,0,0,45,194,1,0,
        0,0,47,196,1,0,0,0,49,198,1,0,0,0,51,200,1,0,0,0,53,202,1,0,0,0,
        55,204,1,0,0,0,57,206,1,0,0,0,59,208,1,0,0,0,61,214,1,0,0,0,63,216,
        1,0,0,0,65,220,1,0,0,0,67,225,1,0,0,0,69,230,1,0,0,0,71,236,1,0,
        0,0,73,242,1,0,0,0,75,251,1,0,0,0,77,262,1,0,0,0,79,271,1,0,0,0,
        81,276,1,0,0,0,83,289,1,0,0,0,85,296,1,0,0,0,87,314,1,0,0,0,89,316,
        1,0,0,0,91,328,1,0,0,0,93,340,1,0,0,0,95,343,1,0,0,0,97,349,1,0,
        0,0,99,100,5,118,0,0,100,101,5,111,0,0,101,102,5,105,0,0,102,103,
        5,100,0,0,103,2,1,0,0,0,104,105,5,105,0,0,105,106,5,102,0,0,106,
        4,1,0,0,0,107,108,5,101,0,0,108,109,5,108,0,0,109,110,5,115,0,0,
        110,111,5,101,0,0,111,6,1,0,0,0,112,113,5,119,0,0,113,114,5,104,
        0,0,114,115,5,105,0,0,115,116,5,108,0,0,116,117,5,101,0,0,117,8,
        1,0,0,0,118,119,5,102,0,0,119,120,5,111,0,0,120,121,5,114,0,0,121,
        10,1,0,0,0,122,123,5,98,0,0,123,124,5,114,0,0,124,125,5,101,0,0,
        125,126,5,97,0,0,126,127,5,107,0,0,127,12,1,0,0,0,128,129,5,99,0,
        0,129,130,5,111,0,0,130,131,5,110,0,0,131,132,5,116,0,0,132,133,
        5,105,0,0,133,134,5,110,0,0,134,135,5,117,0,0,135,136,5,101,0,0,
        136,14,1,0,0,0,137,138,5,114,0,0,138,139,5,101,0,0,139,140,5,116,
        0,0,140,141,5,117,0,0,141,142,5,114,0,0,142,143,5,110,0,0,143,16,
        1,0,0,0,144,145,5,112,0,0,145,146,5,114,0,0,146,147,5,105,0,0,147,
        148,5,110,0,0,148,149,5,116,0,0,149,150,5,102,0,0,150,18,1,0,0,0,
        151,152,5,115,0,0,152,153,5,99,0,0,153,154,5,97,0,0,154,155,5,110,
        0,0,155,156,5,102,0,0,156,20,1,0,0,0,157,167,7,0,0,0,158,159,5,60,
        0,0,159,167,5,61,0,0,160,161,5,62,0,0,161,167,5,61,0,0,162,163,5,
        61,0,0,163,167,5,61,0,0,164,165,5,33,0,0,165,167,5,61,0,0,166,157,
        1,0,0,0,166,158,1,0,0,0,166,160,1,0,0,0,166,162,1,0,0,0,166,164,
        1,0,0,0,167,22,1,0,0,0,168,169,5,38,0,0,169,173,5,38,0,0,170,171,
        5,124,0,0,171,173,5,124,0,0,172,168,1,0,0,0,172,170,1,0,0,0,173,
        24,1,0,0,0,174,175,5,61,0,0,175,26,1,0,0,0,176,177,5,59,0,0,177,
        28,1,0,0,0,178,179,5,40,0,0,179,30,1,0,0,0,180,181,5,41,0,0,181,
        32,1,0,0,0,182,183,5,123,0,0,183,34,1,0,0,0,184,185,5,125,0,0,185,
        36,1,0,0,0,186,187,5,91,0,0,187,38,1,0,0,0,188,189,5,93,0,0,189,
        40,1,0,0,0,190,191,5,44,0,0,191,42,1,0,0,0,192,193,5,46,0,0,193,
        44,1,0,0,0,194,195,5,43,0,0,195,46,1,0,0,0,196,197,5,45,0,0,197,
        48,1,0,0,0,198,199,5,42,0,0,199,50,1,0,0,0,200,201,5,47,0,0,201,
        52,1,0,0,0,202,203,5,33,0,0,203,54,1,0,0,0,204,205,5,38,0,0,205,
        56,1,0,0,0,206,207,5,37,0,0,207,58,1,0,0,0,208,209,5,35,0,0,209,
        60,1,0,0,0,210,211,5,43,0,0,211,215,5,43,0,0,212,213,5,45,0,0,213,
        215,5,45,0,0,214,210,1,0,0,0,214,212,1,0,0,0,215,62,1,0,0,0,216,
        217,5,105,0,0,217,218,5,110,0,0,218,219,5,116,0,0,219,64,1,0,0,0,
        220,221,5,99,0,0,221,222,5,104,0,0,222,223,5,97,0,0,223,224,5,114,
        0,0,224,66,1,0,0,0,225,226,5,98,0,0,226,227,5,111,0,0,227,228,5,
        111,0,0,228,229,5,108,0,0,229,68,1,0,0,0,230,231,5,102,0,0,231,232,
        5,108,0,0,232,233,5,111,0,0,233,234,5,97,0,0,234,235,5,116,0,0,235,
        70,1,0,0,0,236,237,5,99,0,0,237,238,5,111,0,0,238,239,5,110,0,0,
        239,240,5,115,0,0,240,241,5,116,0,0,241,72,1,0,0,0,242,243,5,35,
        0,0,243,244,5,105,0,0,244,245,5,110,0,0,245,246,5,99,0,0,246,247,
        5,108,0,0,247,248,5,117,0,0,248,249,5,100,0,0,249,250,5,101,0,0,
        250,74,1,0,0,0,251,252,5,60,0,0,252,253,5,115,0,0,253,254,5,116,
        0,0,254,255,5,100,0,0,255,256,5,105,0,0,256,257,5,111,0,0,257,258,
        5,46,0,0,258,259,5,104,0,0,259,260,5,62,0,0,260,76,1,0,0,0,261,263,
        7,1,0,0,262,261,1,0,0,0,263,267,1,0,0,0,264,266,7,2,0,0,265,264,
        1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,78,1,
        0,0,0,269,267,1,0,0,0,270,272,3,93,46,0,271,270,1,0,0,0,272,273,
        1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,80,1,0,0,0,275,277,3,
        93,46,0,276,275,1,0,0,0,277,278,1,0,0,0,278,276,1,0,0,0,278,279,
        1,0,0,0,279,282,1,0,0,0,280,283,3,41,20,0,281,283,3,43,21,0,282,
        280,1,0,0,0,282,281,1,0,0,0,283,285,1,0,0,0,284,286,3,93,46,0,285,
        284,1,0,0,0,286,287,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,
        82,1,0,0,0,289,291,5,39,0,0,290,292,5,92,0,0,291,290,1,0,0,0,291,
        292,1,0,0,0,292,293,1,0,0,0,293,294,9,0,0,0,294,295,5,39,0,0,295,
        84,1,0,0,0,296,300,5,34,0,0,297,299,9,0,0,0,298,297,1,0,0,0,299,
        302,1,0,0,0,300,301,1,0,0,0,300,298,1,0,0,0,301,303,1,0,0,0,302,
        300,1,0,0,0,303,304,5,34,0,0,304,86,1,0,0,0,305,306,5,116,0,0,306,
        307,5,114,0,0,307,308,5,117,0,0,308,315,5,101,0,0,309,310,5,102,
        0,0,310,311,5,97,0,0,311,312,5,108,0,0,312,313,5,115,0,0,313,315,
        5,101,0,0,314,305,1,0,0,0,314,309,1,0,0,0,315,88,1,0,0,0,316,317,
        5,47,0,0,317,318,5,47,0,0,318,322,1,0,0,0,319,321,8,3,0,0,320,319,
        1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,326,
        1,0,0,0,324,322,1,0,0,0,325,327,7,3,0,0,326,325,1,0,0,0,326,327,
        1,0,0,0,327,90,1,0,0,0,328,329,5,47,0,0,329,330,5,42,0,0,330,334,
        1,0,0,0,331,333,9,0,0,0,332,331,1,0,0,0,333,336,1,0,0,0,334,335,
        1,0,0,0,334,332,1,0,0,0,335,337,1,0,0,0,336,334,1,0,0,0,337,338,
        5,42,0,0,338,339,5,47,0,0,339,92,1,0,0,0,340,341,7,4,0,0,341,94,
        1,0,0,0,342,344,7,5,0,0,343,342,1,0,0,0,344,345,1,0,0,0,345,343,
        1,0,0,0,345,346,1,0,0,0,346,347,1,0,0,0,347,348,6,47,0,0,348,96,
        1,0,0,0,349,350,9,0,0,0,350,98,1,0,0,0,18,0,166,172,214,262,265,
        267,273,278,282,287,291,300,314,322,326,334,345,1,6,0,0
    ]

class CLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    VOID = 1
    IF = 2
    ELSE = 3
    WHILE = 4
    FOR = 5
    BREAK = 6
    CONTINUE = 7
    RETURN = 8
    PRINTF = 9
    SCANF = 10
    COMPOPS = 11
    LOGICOPS = 12
    EQUALS = 13
    SEMICOLON = 14
    LBRACKET = 15
    RBRACKET = 16
    LCURLY = 17
    RCURLY = 18
    LSQUARE = 19
    RSQUARE = 20
    COMMA = 21
    DOT = 22
    PLUS = 23
    MINUS = 24
    STAR = 25
    DIVIDE = 26
    EXCLAMAION = 27
    AMPERSAND = 28
    PROCENT = 29
    HASH = 30
    SPECIALUNARY = 31
    INT = 32
    CHAR = 33
    BOOL = 34
    FLOAT = 35
    CONST = 36
    INCLUDE = 37
    STDIO = 38
    IDENTIFIER = 39
    INTLITERAL = 40
    FLOATLITERAL = 41
    CHARLITERAL = 42
    STRINGLITERAL = 43
    BOOLLITERAL = 44
    SINGLECOMMENT = 45
    MULTICOMMENT = 46
    WS = 47
    ANY = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'void'", "'if'", "'else'", "'while'", "'for'", "'break'", "'continue'", 
            "'return'", "'printf'", "'scanf'", "'='", "';'", "'('", "')'", 
            "'{'", "'}'", "'['", "']'", "','", "'.'", "'+'", "'-'", "'*'", 
            "'/'", "'!'", "'&'", "'%'", "'#'", "'int'", "'char'", "'bool'", 
            "'float'", "'const'", "'#include'", "'<stdio.h>'" ]

    symbolicNames = [ "<INVALID>",
            "VOID", "IF", "ELSE", "WHILE", "FOR", "BREAK", "CONTINUE", "RETURN", 
            "PRINTF", "SCANF", "COMPOPS", "LOGICOPS", "EQUALS", "SEMICOLON", 
            "LBRACKET", "RBRACKET", "LCURLY", "RCURLY", "LSQUARE", "RSQUARE", 
            "COMMA", "DOT", "PLUS", "MINUS", "STAR", "DIVIDE", "EXCLAMAION", 
            "AMPERSAND", "PROCENT", "HASH", "SPECIALUNARY", "INT", "CHAR", 
            "BOOL", "FLOAT", "CONST", "INCLUDE", "STDIO", "IDENTIFIER", 
            "INTLITERAL", "FLOATLITERAL", "CHARLITERAL", "STRINGLITERAL", 
            "BOOLLITERAL", "SINGLECOMMENT", "MULTICOMMENT", "WS", "ANY" ]

    ruleNames = [ "VOID", "IF", "ELSE", "WHILE", "FOR", "BREAK", "CONTINUE", 
                  "RETURN", "PRINTF", "SCANF", "COMPOPS", "LOGICOPS", "EQUALS", 
                  "SEMICOLON", "LBRACKET", "RBRACKET", "LCURLY", "RCURLY", 
                  "LSQUARE", "RSQUARE", "COMMA", "DOT", "PLUS", "MINUS", 
                  "STAR", "DIVIDE", "EXCLAMAION", "AMPERSAND", "PROCENT", 
                  "HASH", "SPECIALUNARY", "INT", "CHAR", "BOOL", "FLOAT", 
                  "CONST", "INCLUDE", "STDIO", "IDENTIFIER", "INTLITERAL", 
                  "FLOATLITERAL", "CHARLITERAL", "STRINGLITERAL", "BOOLLITERAL", 
                  "SINGLECOMMENT", "MULTICOMMENT", "DIGIT", "WS", "ANY" ]

    grammarFileName = "C.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


