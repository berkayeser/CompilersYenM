# Generated from Antlr/C.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,219,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,82,8,3,
        1,4,1,4,1,4,1,4,3,4,88,8,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,
        9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,3,13,110,8,13,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
        1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
        1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,149,
        8,20,1,21,3,21,152,8,21,1,21,5,21,155,8,21,10,21,12,21,158,9,21,
        1,22,4,22,161,8,22,11,22,12,22,162,1,23,4,23,166,8,23,11,23,12,23,
        167,1,23,1,23,4,23,172,8,23,11,23,12,23,173,3,23,176,8,23,1,24,1,
        24,3,24,180,8,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,189,8,25,
        10,25,12,25,192,9,25,1,25,3,25,195,8,25,1,26,1,26,1,26,1,26,5,26,
        201,8,26,10,26,12,26,204,9,26,1,26,1,26,1,26,1,27,1,27,1,28,4,28,
        212,8,28,11,28,12,28,213,1,28,1,28,1,29,1,29,1,202,0,30,1,1,3,2,
        5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
        15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
        26,53,27,55,28,57,29,59,30,1,0,7,2,0,60,60,62,62,3,0,65,90,95,95,
        97,122,4,0,48,57,65,90,95,95,97,122,2,0,44,44,46,46,2,0,10,10,13,
        13,1,0,48,57,3,0,9,10,13,13,32,32,235,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
        1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
        1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,3,68,1,0,0,0,5,70,
        1,0,0,0,7,81,1,0,0,0,9,87,1,0,0,0,11,89,1,0,0,0,13,91,1,0,0,0,15,
        93,1,0,0,0,17,95,1,0,0,0,19,97,1,0,0,0,21,99,1,0,0,0,23,101,1,0,
        0,0,25,103,1,0,0,0,27,109,1,0,0,0,29,111,1,0,0,0,31,115,1,0,0,0,
        33,120,1,0,0,0,35,125,1,0,0,0,37,131,1,0,0,0,39,137,1,0,0,0,41,148,
        1,0,0,0,43,151,1,0,0,0,45,160,1,0,0,0,47,165,1,0,0,0,49,177,1,0,
        0,0,51,184,1,0,0,0,53,196,1,0,0,0,55,208,1,0,0,0,57,211,1,0,0,0,
        59,217,1,0,0,0,61,62,5,112,0,0,62,63,5,114,0,0,63,64,5,105,0,0,64,
        65,5,110,0,0,65,66,5,116,0,0,66,67,5,102,0,0,67,2,1,0,0,0,68,69,
        5,40,0,0,69,4,1,0,0,0,70,71,5,41,0,0,71,6,1,0,0,0,72,82,7,0,0,0,
        73,74,5,60,0,0,74,82,5,61,0,0,75,76,5,62,0,0,76,82,5,61,0,0,77,78,
        5,61,0,0,78,82,5,61,0,0,79,80,5,33,0,0,80,82,5,61,0,0,81,72,1,0,
        0,0,81,73,1,0,0,0,81,75,1,0,0,0,81,77,1,0,0,0,81,79,1,0,0,0,82,8,
        1,0,0,0,83,84,5,38,0,0,84,88,5,38,0,0,85,86,5,124,0,0,86,88,5,124,
        0,0,87,83,1,0,0,0,87,85,1,0,0,0,88,10,1,0,0,0,89,90,5,59,0,0,90,
        12,1,0,0,0,91,92,5,43,0,0,92,14,1,0,0,0,93,94,5,45,0,0,94,16,1,0,
        0,0,95,96,5,42,0,0,96,18,1,0,0,0,97,98,5,47,0,0,98,20,1,0,0,0,99,
        100,5,33,0,0,100,22,1,0,0,0,101,102,5,38,0,0,102,24,1,0,0,0,103,
        104,5,37,0,0,104,26,1,0,0,0,105,106,5,43,0,0,106,110,5,43,0,0,107,
        108,5,45,0,0,108,110,5,45,0,0,109,105,1,0,0,0,109,107,1,0,0,0,110,
        28,1,0,0,0,111,112,5,105,0,0,112,113,5,110,0,0,113,114,5,116,0,0,
        114,30,1,0,0,0,115,116,5,99,0,0,116,117,5,104,0,0,117,118,5,97,0,
        0,118,119,5,114,0,0,119,32,1,0,0,0,120,121,5,98,0,0,121,122,5,111,
        0,0,122,123,5,111,0,0,123,124,5,108,0,0,124,34,1,0,0,0,125,126,5,
        102,0,0,126,127,5,108,0,0,127,128,5,111,0,0,128,129,5,97,0,0,129,
        130,5,116,0,0,130,36,1,0,0,0,131,132,5,99,0,0,132,133,5,111,0,0,
        133,134,5,110,0,0,134,135,5,115,0,0,135,136,5,116,0,0,136,38,1,0,
        0,0,137,138,5,61,0,0,138,40,1,0,0,0,139,140,5,116,0,0,140,141,5,
        114,0,0,141,142,5,117,0,0,142,149,5,101,0,0,143,144,5,102,0,0,144,
        145,5,97,0,0,145,146,5,108,0,0,146,147,5,115,0,0,147,149,5,101,0,
        0,148,139,1,0,0,0,148,143,1,0,0,0,149,42,1,0,0,0,150,152,7,1,0,0,
        151,150,1,0,0,0,152,156,1,0,0,0,153,155,7,2,0,0,154,153,1,0,0,0,
        155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,44,1,0,0,0,158,
        156,1,0,0,0,159,161,3,55,27,0,160,159,1,0,0,0,161,162,1,0,0,0,162,
        160,1,0,0,0,162,163,1,0,0,0,163,46,1,0,0,0,164,166,3,55,27,0,165,
        164,1,0,0,0,166,167,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,
        175,1,0,0,0,169,171,7,3,0,0,170,172,3,55,27,0,171,170,1,0,0,0,172,
        173,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,176,1,0,0,0,175,
        169,1,0,0,0,175,176,1,0,0,0,176,48,1,0,0,0,177,179,5,39,0,0,178,
        180,5,92,0,0,179,178,1,0,0,0,179,180,1,0,0,0,180,181,1,0,0,0,181,
        182,9,0,0,0,182,183,5,39,0,0,183,50,1,0,0,0,184,185,5,47,0,0,185,
        186,5,47,0,0,186,190,1,0,0,0,187,189,8,4,0,0,188,187,1,0,0,0,189,
        192,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,194,1,0,0,0,192,
        190,1,0,0,0,193,195,7,4,0,0,194,193,1,0,0,0,194,195,1,0,0,0,195,
        52,1,0,0,0,196,197,5,47,0,0,197,198,5,42,0,0,198,202,1,0,0,0,199,
        201,9,0,0,0,200,199,1,0,0,0,201,204,1,0,0,0,202,203,1,0,0,0,202,
        200,1,0,0,0,203,205,1,0,0,0,204,202,1,0,0,0,205,206,5,42,0,0,206,
        207,5,47,0,0,207,54,1,0,0,0,208,209,7,5,0,0,209,56,1,0,0,0,210,212,
        7,6,0,0,211,210,1,0,0,0,212,213,1,0,0,0,213,211,1,0,0,0,213,214,
        1,0,0,0,214,215,1,0,0,0,215,216,6,28,0,0,216,58,1,0,0,0,217,218,
        9,0,0,0,218,60,1,0,0,0,17,0,81,87,109,148,151,154,156,162,167,173,
        175,179,190,194,202,213,1,6,0,0
    ]

class CLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    COMPOPS = 4
    LOGICOPS = 5
    SEMICOLON = 6
    PLUS = 7
    MINUS = 8
    STAR = 9
    DIVIDE = 10
    EXCLAMAION = 11
    AMPERSAND = 12
    PROCENT = 13
    SPECIALUNARY = 14
    INT = 15
    CHAR = 16
    BOOL = 17
    FLOAT = 18
    CONST = 19
    EQUALS = 20
    BOOLLITERAL = 21
    IDENTIFIER = 22
    INTLITERAL = 23
    FLOATLITERAL = 24
    CHARLITERAL = 25
    SINGLECOMMENT = 26
    MULTICOMMENT = 27
    DIGIT = 28
    WS = 29
    ANY = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'printf'", "'('", "')'", "';'", "'+'", "'-'", "'*'", "'/'", 
            "'!'", "'&'", "'%'", "'int'", "'char'", "'bool'", "'float'", 
            "'const'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "COMPOPS", "LOGICOPS", "SEMICOLON", "PLUS", "MINUS", "STAR", 
            "DIVIDE", "EXCLAMAION", "AMPERSAND", "PROCENT", "SPECIALUNARY", 
            "INT", "CHAR", "BOOL", "FLOAT", "CONST", "EQUALS", "BOOLLITERAL", 
            "IDENTIFIER", "INTLITERAL", "FLOATLITERAL", "CHARLITERAL", "SINGLECOMMENT", 
            "MULTICOMMENT", "DIGIT", "WS", "ANY" ]

    ruleNames = [ "T__0", "T__1", "T__2", "COMPOPS", "LOGICOPS", "SEMICOLON", 
                  "PLUS", "MINUS", "STAR", "DIVIDE", "EXCLAMAION", "AMPERSAND", 
                  "PROCENT", "SPECIALUNARY", "INT", "CHAR", "BOOL", "FLOAT", 
                  "CONST", "EQUALS", "BOOLLITERAL", "IDENTIFIER", "INTLITERAL", 
                  "FLOATLITERAL", "CHARLITERAL", "SINGLECOMMENT", "MULTICOMMENT", 
                  "DIGIT", "WS", "ANY" ]

    grammarFileName = "C.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


