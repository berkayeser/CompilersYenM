# Generated from C.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,248,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,
        4,84,8,4,1,5,1,5,1,5,1,5,3,5,90,8,5,1,6,1,6,1,6,1,6,3,6,96,8,6,1,
        6,5,6,99,8,6,10,6,12,6,102,9,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
        1,10,1,10,3,10,114,8,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
        1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,4,17,145,8,17,11,17,12,17,
        146,1,17,1,17,1,18,3,18,152,8,18,1,18,5,18,155,8,18,10,18,12,18,
        158,9,18,1,19,4,19,161,8,19,11,19,12,19,162,1,20,4,20,166,8,20,11,
        20,12,20,167,1,20,1,20,4,20,172,8,20,11,20,12,20,173,3,20,176,8,
        20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,187,8,21,1,
        22,1,22,1,22,1,22,1,23,1,23,3,23,195,8,23,1,24,1,24,1,24,1,24,5,
        24,201,8,24,10,24,12,24,204,9,24,1,24,1,24,1,25,1,25,5,25,210,8,
        25,10,25,12,25,213,9,25,1,25,1,25,1,26,1,26,1,26,1,26,5,26,221,8,
        26,10,26,12,26,224,9,26,1,26,1,26,1,27,1,27,1,27,1,27,5,27,232,8,
        27,10,27,12,27,235,9,27,1,27,1,27,1,27,1,28,1,28,1,29,4,29,243,8,
        29,11,29,12,29,244,1,29,1,29,3,202,211,233,0,30,1,1,3,2,5,3,7,4,
        9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,1,0,10,2,0,60,60,62,62,3,0,33,33,38,38,45,45,2,
        0,43,43,45,45,3,0,37,37,42,42,47,47,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,2,0,44,44,46,46,2,0,10,10,13,13,1,0,48,57,
        3,0,9,10,13,13,32,32,270,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,3,63,1,0,0,0,5,70,1,0,0,0,7,72,
        1,0,0,0,9,83,1,0,0,0,11,89,1,0,0,0,13,95,1,0,0,0,15,103,1,0,0,0,
        17,105,1,0,0,0,19,107,1,0,0,0,21,113,1,0,0,0,23,115,1,0,0,0,25,119,
        1,0,0,0,27,124,1,0,0,0,29,129,1,0,0,0,31,135,1,0,0,0,33,141,1,0,
        0,0,35,144,1,0,0,0,37,151,1,0,0,0,39,160,1,0,0,0,41,165,1,0,0,0,
        43,186,1,0,0,0,45,188,1,0,0,0,47,194,1,0,0,0,49,196,1,0,0,0,51,207,
        1,0,0,0,53,216,1,0,0,0,55,227,1,0,0,0,57,239,1,0,0,0,59,242,1,0,
        0,0,61,62,5,59,0,0,62,2,1,0,0,0,63,64,5,112,0,0,64,65,5,114,0,0,
        65,66,5,105,0,0,66,67,5,110,0,0,67,68,5,116,0,0,68,69,5,102,0,0,
        69,4,1,0,0,0,70,71,5,40,0,0,71,6,1,0,0,0,72,73,5,41,0,0,73,8,1,0,
        0,0,74,84,7,0,0,0,75,76,5,60,0,0,76,84,5,61,0,0,77,78,5,62,0,0,78,
        84,5,61,0,0,79,80,5,61,0,0,80,84,5,61,0,0,81,82,5,33,0,0,82,84,5,
        61,0,0,83,74,1,0,0,0,83,75,1,0,0,0,83,77,1,0,0,0,83,79,1,0,0,0,83,
        81,1,0,0,0,84,10,1,0,0,0,85,86,5,38,0,0,86,90,5,38,0,0,87,88,5,124,
        0,0,88,90,5,124,0,0,89,85,1,0,0,0,89,87,1,0,0,0,90,12,1,0,0,0,91,
        96,3,23,11,0,92,96,3,25,12,0,93,96,3,29,14,0,94,96,3,27,13,0,95,
        91,1,0,0,0,95,92,1,0,0,0,95,93,1,0,0,0,95,94,1,0,0,0,96,100,1,0,
        0,0,97,99,5,42,0,0,98,97,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,
        101,1,0,0,0,101,14,1,0,0,0,102,100,1,0,0,0,103,104,7,1,0,0,104,16,
        1,0,0,0,105,106,7,2,0,0,106,18,1,0,0,0,107,108,7,3,0,0,108,20,1,
        0,0,0,109,110,5,43,0,0,110,114,5,43,0,0,111,112,5,45,0,0,112,114,
        5,45,0,0,113,109,1,0,0,0,113,111,1,0,0,0,114,22,1,0,0,0,115,116,
        5,105,0,0,116,117,5,110,0,0,117,118,5,116,0,0,118,24,1,0,0,0,119,
        120,5,99,0,0,120,121,5,104,0,0,121,122,5,97,0,0,122,123,5,114,0,
        0,123,26,1,0,0,0,124,125,5,98,0,0,125,126,5,111,0,0,126,127,5,111,
        0,0,127,128,5,108,0,0,128,28,1,0,0,0,129,130,5,102,0,0,130,131,5,
        108,0,0,131,132,5,111,0,0,132,133,5,97,0,0,133,134,5,116,0,0,134,
        30,1,0,0,0,135,136,5,99,0,0,136,137,5,111,0,0,137,138,5,110,0,0,
        138,139,5,115,0,0,139,140,5,116,0,0,140,32,1,0,0,0,141,142,5,61,
        0,0,142,34,1,0,0,0,143,145,5,42,0,0,144,143,1,0,0,0,145,146,1,0,
        0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,148,1,0,0,0,148,149,3,37,
        18,0,149,36,1,0,0,0,150,152,7,4,0,0,151,150,1,0,0,0,152,156,1,0,
        0,0,153,155,7,5,0,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,1,0,
        0,0,156,157,1,0,0,0,157,38,1,0,0,0,158,156,1,0,0,0,159,161,3,57,
        28,0,160,159,1,0,0,0,161,162,1,0,0,0,162,160,1,0,0,0,162,163,1,0,
        0,0,163,40,1,0,0,0,164,166,3,57,28,0,165,164,1,0,0,0,166,167,1,0,
        0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,175,1,0,0,0,169,171,7,6,
        0,0,170,172,3,57,28,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,
        0,0,0,173,174,1,0,0,0,174,176,1,0,0,0,175,169,1,0,0,0,175,176,1,
        0,0,0,176,42,1,0,0,0,177,178,5,116,0,0,178,179,5,114,0,0,179,180,
        5,117,0,0,180,187,5,101,0,0,181,182,5,102,0,0,182,183,5,97,0,0,183,
        184,5,108,0,0,184,185,5,115,0,0,185,187,5,101,0,0,186,177,1,0,0,
        0,186,181,1,0,0,0,187,44,1,0,0,0,188,189,5,39,0,0,189,190,9,0,0,
        0,190,191,5,39,0,0,191,46,1,0,0,0,192,195,3,49,24,0,193,195,3,51,
        25,0,194,192,1,0,0,0,194,193,1,0,0,0,195,48,1,0,0,0,196,197,5,39,
        0,0,197,198,9,0,0,0,198,202,9,0,0,0,199,201,9,0,0,0,200,199,1,0,
        0,0,201,204,1,0,0,0,202,203,1,0,0,0,202,200,1,0,0,0,203,205,1,0,
        0,0,204,202,1,0,0,0,205,206,5,39,0,0,206,50,1,0,0,0,207,211,5,34,
        0,0,208,210,9,0,0,0,209,208,1,0,0,0,210,213,1,0,0,0,211,212,1,0,
        0,0,211,209,1,0,0,0,212,214,1,0,0,0,213,211,1,0,0,0,214,215,5,34,
        0,0,215,52,1,0,0,0,216,217,5,47,0,0,217,218,5,47,0,0,218,222,1,0,
        0,0,219,221,8,7,0,0,220,219,1,0,0,0,221,224,1,0,0,0,222,220,1,0,
        0,0,222,223,1,0,0,0,223,225,1,0,0,0,224,222,1,0,0,0,225,226,7,7,
        0,0,226,54,1,0,0,0,227,228,5,47,0,0,228,229,5,42,0,0,229,233,1,0,
        0,0,230,232,9,0,0,0,231,230,1,0,0,0,232,235,1,0,0,0,233,234,1,0,
        0,0,233,231,1,0,0,0,234,236,1,0,0,0,235,233,1,0,0,0,236,237,5,42,
        0,0,237,238,5,47,0,0,238,56,1,0,0,0,239,240,7,8,0,0,240,58,1,0,0,
        0,241,243,7,9,0,0,242,241,1,0,0,0,243,244,1,0,0,0,244,242,1,0,0,
        0,244,245,1,0,0,0,245,246,1,0,0,0,246,247,6,29,0,0,247,60,1,0,0,
        0,21,0,83,89,95,100,113,146,151,154,156,162,167,173,175,186,194,
        202,211,222,233,244,1,6,0,0
    ]

class CLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    COMPOPS = 5
    LOGICOPS = 6
    TYPE = 7
    UNARYOPS = 8
    TERMOPS = 9
    FACTOROPS = 10
    SPECIALUNARY = 11
    INT = 12
    CHAR = 13
    BOOL = 14
    FLOAT = 15
    CONST = 16
    EQUALS = 17
    POINTER = 18
    IDENTIFIER = 19
    INTLITERAL = 20
    FLOATLITERAL = 21
    BOOLLITERAL = 22
    CHARLITERAL = 23
    STRINGLITERAL = 24
    SINGLESTRING = 25
    DOUBLESTRING = 26
    SINGLECOMMENT = 27
    MULTICOMMENT = 28
    DIGIT = 29
    WS = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'printf'", "'('", "')'", "'int'", "'char'", "'bool'", 
            "'float'", "'const'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "COMPOPS", "LOGICOPS", "TYPE", "UNARYOPS", "TERMOPS", "FACTOROPS", 
            "SPECIALUNARY", "INT", "CHAR", "BOOL", "FLOAT", "CONST", "EQUALS", 
            "POINTER", "IDENTIFIER", "INTLITERAL", "FLOATLITERAL", "BOOLLITERAL", 
            "CHARLITERAL", "STRINGLITERAL", "SINGLESTRING", "DOUBLESTRING", 
            "SINGLECOMMENT", "MULTICOMMENT", "DIGIT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "COMPOPS", "LOGICOPS", 
                  "TYPE", "UNARYOPS", "TERMOPS", "FACTOROPS", "SPECIALUNARY", 
                  "INT", "CHAR", "BOOL", "FLOAT", "CONST", "EQUALS", "POINTER", 
                  "IDENTIFIER", "INTLITERAL", "FLOATLITERAL", "BOOLLITERAL", 
                  "CHARLITERAL", "STRINGLITERAL", "SINGLESTRING", "DOUBLESTRING", 
                  "SINGLECOMMENT", "MULTICOMMENT", "DIGIT", "WS" ]

    grammarFileName = "C.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


