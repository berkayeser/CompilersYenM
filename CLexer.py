# Generated from C.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,31,254,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,3,4,79,8,4,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,90,8,5,1,6,1,6,1,6,1,6,3,6,96,8,6,
        1,7,1,7,1,7,1,7,3,7,102,8,7,1,7,5,7,105,8,7,10,7,12,7,108,9,7,1,
        8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,3,11,120,8,11,1,12,1,
        12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
        15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,
        17,1,18,4,18,151,8,18,11,18,12,18,152,1,18,1,18,1,19,3,19,158,8,
        19,1,19,5,19,161,8,19,10,19,12,19,164,9,19,1,20,4,20,167,8,20,11,
        20,12,20,168,1,21,4,21,172,8,21,11,21,12,21,173,1,21,1,21,4,21,178,
        8,21,11,21,12,21,179,3,21,182,8,21,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,3,22,193,8,22,1,23,1,23,1,23,1,23,1,24,1,24,3,24,
        201,8,24,1,25,1,25,1,25,1,25,5,25,207,8,25,10,25,12,25,210,9,25,
        1,25,1,25,1,26,1,26,5,26,216,8,26,10,26,12,26,219,9,26,1,26,1,26,
        1,27,1,27,1,27,1,27,5,27,227,8,27,10,27,12,27,230,9,27,1,27,1,27,
        1,28,1,28,1,28,1,28,5,28,238,8,28,10,28,12,28,241,9,28,1,28,1,28,
        1,28,1,29,1,29,1,30,4,30,249,8,30,11,30,12,30,250,1,30,1,30,3,208,
        217,239,0,31,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,1,0,10,2,0,
        60,60,62,62,3,0,33,33,38,38,45,45,2,0,43,43,45,45,3,0,37,37,42,42,
        47,47,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,44,
        44,46,46,2,0,10,10,13,13,1,0,48,57,3,0,9,10,13,13,32,32,277,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,1,63,1,0,0,0,3,65,1,0,0,0,5,72,1,0,0,0,7,74,1,0,0,0,9,78,1,0,
        0,0,11,89,1,0,0,0,13,95,1,0,0,0,15,101,1,0,0,0,17,109,1,0,0,0,19,
        111,1,0,0,0,21,113,1,0,0,0,23,119,1,0,0,0,25,121,1,0,0,0,27,125,
        1,0,0,0,29,130,1,0,0,0,31,135,1,0,0,0,33,141,1,0,0,0,35,147,1,0,
        0,0,37,150,1,0,0,0,39,157,1,0,0,0,41,166,1,0,0,0,43,171,1,0,0,0,
        45,192,1,0,0,0,47,194,1,0,0,0,49,200,1,0,0,0,51,202,1,0,0,0,53,213,
        1,0,0,0,55,222,1,0,0,0,57,233,1,0,0,0,59,245,1,0,0,0,61,248,1,0,
        0,0,63,64,5,59,0,0,64,2,1,0,0,0,65,66,5,112,0,0,66,67,5,114,0,0,
        67,68,5,105,0,0,68,69,5,110,0,0,69,70,5,116,0,0,70,71,5,102,0,0,
        71,4,1,0,0,0,72,73,5,40,0,0,73,6,1,0,0,0,74,75,5,41,0,0,75,8,1,0,
        0,0,76,79,3,13,6,0,77,79,3,11,5,0,78,76,1,0,0,0,78,77,1,0,0,0,79,
        10,1,0,0,0,80,90,7,0,0,0,81,82,5,60,0,0,82,90,5,61,0,0,83,84,5,62,
        0,0,84,90,5,61,0,0,85,86,5,61,0,0,86,90,5,61,0,0,87,88,5,33,0,0,
        88,90,5,61,0,0,89,80,1,0,0,0,89,81,1,0,0,0,89,83,1,0,0,0,89,85,1,
        0,0,0,89,87,1,0,0,0,90,12,1,0,0,0,91,92,5,38,0,0,92,96,5,38,0,0,
        93,94,5,124,0,0,94,96,5,124,0,0,95,91,1,0,0,0,95,93,1,0,0,0,96,14,
        1,0,0,0,97,102,3,25,12,0,98,102,3,27,13,0,99,102,3,31,15,0,100,102,
        3,29,14,0,101,97,1,0,0,0,101,98,1,0,0,0,101,99,1,0,0,0,101,100,1,
        0,0,0,102,106,1,0,0,0,103,105,5,42,0,0,104,103,1,0,0,0,105,108,1,
        0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,16,1,0,0,0,108,106,1,0,
        0,0,109,110,7,1,0,0,110,18,1,0,0,0,111,112,7,2,0,0,112,20,1,0,0,
        0,113,114,7,3,0,0,114,22,1,0,0,0,115,116,5,43,0,0,116,120,5,43,0,
        0,117,118,5,45,0,0,118,120,5,45,0,0,119,115,1,0,0,0,119,117,1,0,
        0,0,120,24,1,0,0,0,121,122,5,105,0,0,122,123,5,110,0,0,123,124,5,
        116,0,0,124,26,1,0,0,0,125,126,5,99,0,0,126,127,5,104,0,0,127,128,
        5,97,0,0,128,129,5,114,0,0,129,28,1,0,0,0,130,131,5,98,0,0,131,132,
        5,111,0,0,132,133,5,111,0,0,133,134,5,108,0,0,134,30,1,0,0,0,135,
        136,5,102,0,0,136,137,5,108,0,0,137,138,5,111,0,0,138,139,5,97,0,
        0,139,140,5,116,0,0,140,32,1,0,0,0,141,142,5,99,0,0,142,143,5,111,
        0,0,143,144,5,110,0,0,144,145,5,115,0,0,145,146,5,116,0,0,146,34,
        1,0,0,0,147,148,5,61,0,0,148,36,1,0,0,0,149,151,5,42,0,0,150,149,
        1,0,0,0,151,152,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,154,
        1,0,0,0,154,155,3,39,19,0,155,38,1,0,0,0,156,158,7,4,0,0,157,156,
        1,0,0,0,158,162,1,0,0,0,159,161,7,5,0,0,160,159,1,0,0,0,161,164,
        1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,40,1,0,0,0,164,162,1,
        0,0,0,165,167,3,59,29,0,166,165,1,0,0,0,167,168,1,0,0,0,168,166,
        1,0,0,0,168,169,1,0,0,0,169,42,1,0,0,0,170,172,3,59,29,0,171,170,
        1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,181,
        1,0,0,0,175,177,7,6,0,0,176,178,3,59,29,0,177,176,1,0,0,0,178,179,
        1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,182,1,0,0,0,181,175,
        1,0,0,0,181,182,1,0,0,0,182,44,1,0,0,0,183,184,5,116,0,0,184,185,
        5,114,0,0,185,186,5,117,0,0,186,193,5,101,0,0,187,188,5,102,0,0,
        188,189,5,97,0,0,189,190,5,108,0,0,190,191,5,115,0,0,191,193,5,101,
        0,0,192,183,1,0,0,0,192,187,1,0,0,0,193,46,1,0,0,0,194,195,5,39,
        0,0,195,196,9,0,0,0,196,197,5,39,0,0,197,48,1,0,0,0,198,201,3,51,
        25,0,199,201,3,53,26,0,200,198,1,0,0,0,200,199,1,0,0,0,201,50,1,
        0,0,0,202,203,5,39,0,0,203,204,9,0,0,0,204,208,9,0,0,0,205,207,9,
        0,0,0,206,205,1,0,0,0,207,210,1,0,0,0,208,209,1,0,0,0,208,206,1,
        0,0,0,209,211,1,0,0,0,210,208,1,0,0,0,211,212,5,39,0,0,212,52,1,
        0,0,0,213,217,5,34,0,0,214,216,9,0,0,0,215,214,1,0,0,0,216,219,1,
        0,0,0,217,218,1,0,0,0,217,215,1,0,0,0,218,220,1,0,0,0,219,217,1,
        0,0,0,220,221,5,34,0,0,221,54,1,0,0,0,222,223,5,47,0,0,223,224,5,
        47,0,0,224,228,1,0,0,0,225,227,8,7,0,0,226,225,1,0,0,0,227,230,1,
        0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,231,1,0,0,0,230,228,1,
        0,0,0,231,232,7,7,0,0,232,56,1,0,0,0,233,234,5,47,0,0,234,235,5,
        42,0,0,235,239,1,0,0,0,236,238,9,0,0,0,237,236,1,0,0,0,238,241,1,
        0,0,0,239,240,1,0,0,0,239,237,1,0,0,0,240,242,1,0,0,0,241,239,1,
        0,0,0,242,243,5,42,0,0,243,244,5,47,0,0,244,58,1,0,0,0,245,246,7,
        8,0,0,246,60,1,0,0,0,247,249,7,9,0,0,248,247,1,0,0,0,249,250,1,0,
        0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,253,6,30,
        0,0,253,62,1,0,0,0,22,0,78,89,95,101,106,119,152,157,160,162,168,
        173,179,181,192,200,208,217,228,239,250,1,6,0,0
    ]

class CLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    BOOLOPS = 5
    COMPOPS = 6
    LOGICOPS = 7
    TYPE = 8
    UNARYOPS = 9
    TERMOPS = 10
    FACTOROPS = 11
    SPECIALUNARY = 12
    INT = 13
    CHAR = 14
    BOOL = 15
    FLOAT = 16
    CONST = 17
    EQUALS = 18
    POINTER = 19
    IDENTIFIER = 20
    INTLITERAL = 21
    FLOATLITERAL = 22
    BOOLLITERAL = 23
    CHARLITERAL = 24
    STRINGLITERAL = 25
    SINGLESTRING = 26
    DOUBLESTRING = 27
    SINGLECOMMENT = 28
    MULTICOMMENT = 29
    DIGIT = 30
    WS = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'printf'", "'('", "')'", "'int'", "'char'", "'bool'", 
            "'float'", "'const'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "BOOLOPS", "COMPOPS", "LOGICOPS", "TYPE", "UNARYOPS", "TERMOPS", 
            "FACTOROPS", "SPECIALUNARY", "INT", "CHAR", "BOOL", "FLOAT", 
            "CONST", "EQUALS", "POINTER", "IDENTIFIER", "INTLITERAL", "FLOATLITERAL", 
            "BOOLLITERAL", "CHARLITERAL", "STRINGLITERAL", "SINGLESTRING", 
            "DOUBLESTRING", "SINGLECOMMENT", "MULTICOMMENT", "DIGIT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "BOOLOPS", "COMPOPS", 
                  "LOGICOPS", "TYPE", "UNARYOPS", "TERMOPS", "FACTOROPS", 
                  "SPECIALUNARY", "INT", "CHAR", "BOOL", "FLOAT", "CONST", 
                  "EQUALS", "POINTER", "IDENTIFIER", "INTLITERAL", "FLOATLITERAL", 
                  "BOOLLITERAL", "CHARLITERAL", "STRINGLITERAL", "SINGLESTRING", 
                  "DOUBLESTRING", "SINGLECOMMENT", "MULTICOMMENT", "DIGIT", 
                  "WS" ]

    grammarFileName = "C.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


