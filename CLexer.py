# Generated from C.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,219,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,3,4,74,8,4,1,5,1,5,1,5,1,5,3,5,80,8,5,1,6,1,6,1,6,3,
        6,85,8,6,1,6,5,6,88,8,6,10,6,12,6,91,9,6,1,7,1,7,1,8,1,8,1,9,1,9,
        1,10,1,10,1,10,1,10,3,10,103,8,10,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,1,14,1,15,1,15,1,16,4,16,129,8,16,11,16,12,16,130,1,16,1,16,
        1,17,3,17,136,8,17,1,17,5,17,139,8,17,10,17,12,17,142,9,17,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,4,18,154,8,18,11,18,
        12,18,155,1,18,1,18,4,18,160,8,18,11,18,12,18,161,3,18,164,8,18,
        1,18,1,18,3,18,168,8,18,1,19,1,19,5,19,172,8,19,10,19,12,19,175,
        9,19,1,19,1,19,1,20,1,20,5,20,181,8,20,10,20,12,20,184,9,20,1,20,
        1,20,1,21,1,21,1,21,1,21,5,21,192,8,21,10,21,12,21,195,9,21,1,21,
        1,21,1,22,1,22,1,22,1,22,5,22,203,8,22,10,22,12,22,206,9,22,1,22,
        1,22,1,22,1,23,1,23,1,24,4,24,214,8,24,11,24,12,24,215,1,24,1,24,
        3,173,182,204,0,25,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
        43,22,45,23,47,24,49,25,1,0,10,2,0,60,60,62,62,2,0,43,43,45,45,3,
        0,37,37,42,42,47,47,4,0,33,33,38,38,42,43,45,45,3,0,65,90,95,95,
        97,122,4,0,48,57,65,90,95,95,97,122,2,0,44,44,46,46,2,0,10,10,13,
        13,1,0,48,57,3,0,9,10,13,13,32,32,241,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
        1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,3,53,1,0,0,0,5,60,
        1,0,0,0,7,62,1,0,0,0,9,73,1,0,0,0,11,79,1,0,0,0,13,84,1,0,0,0,15,
        92,1,0,0,0,17,94,1,0,0,0,19,96,1,0,0,0,21,102,1,0,0,0,23,104,1,0,
        0,0,25,108,1,0,0,0,27,113,1,0,0,0,29,119,1,0,0,0,31,125,1,0,0,0,
        33,128,1,0,0,0,35,135,1,0,0,0,37,167,1,0,0,0,39,169,1,0,0,0,41,178,
        1,0,0,0,43,187,1,0,0,0,45,198,1,0,0,0,47,210,1,0,0,0,49,213,1,0,
        0,0,51,52,5,59,0,0,52,2,1,0,0,0,53,54,5,112,0,0,54,55,5,114,0,0,
        55,56,5,105,0,0,56,57,5,110,0,0,57,58,5,116,0,0,58,59,5,102,0,0,
        59,4,1,0,0,0,60,61,5,40,0,0,61,6,1,0,0,0,62,63,5,41,0,0,63,8,1,0,
        0,0,64,74,7,0,0,0,65,66,5,60,0,0,66,74,5,61,0,0,67,68,5,62,0,0,68,
        74,5,61,0,0,69,70,5,61,0,0,70,74,5,61,0,0,71,72,5,33,0,0,72,74,5,
        61,0,0,73,64,1,0,0,0,73,65,1,0,0,0,73,67,1,0,0,0,73,69,1,0,0,0,73,
        71,1,0,0,0,74,10,1,0,0,0,75,76,5,38,0,0,76,80,5,38,0,0,77,78,5,124,
        0,0,78,80,5,124,0,0,79,75,1,0,0,0,79,77,1,0,0,0,80,12,1,0,0,0,81,
        85,3,23,11,0,82,85,3,25,12,0,83,85,3,27,13,0,84,81,1,0,0,0,84,82,
        1,0,0,0,84,83,1,0,0,0,85,89,1,0,0,0,86,88,5,42,0,0,87,86,1,0,0,0,
        88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,14,1,0,0,0,91,89,1,
        0,0,0,92,93,7,1,0,0,93,16,1,0,0,0,94,95,7,2,0,0,95,18,1,0,0,0,96,
        97,7,3,0,0,97,20,1,0,0,0,98,99,5,43,0,0,99,103,5,43,0,0,100,101,
        5,45,0,0,101,103,5,45,0,0,102,98,1,0,0,0,102,100,1,0,0,0,103,22,
        1,0,0,0,104,105,5,105,0,0,105,106,5,110,0,0,106,107,5,116,0,0,107,
        24,1,0,0,0,108,109,5,99,0,0,109,110,5,104,0,0,110,111,5,97,0,0,111,
        112,5,114,0,0,112,26,1,0,0,0,113,114,5,102,0,0,114,115,5,108,0,0,
        115,116,5,111,0,0,116,117,5,97,0,0,117,118,5,116,0,0,118,28,1,0,
        0,0,119,120,5,99,0,0,120,121,5,111,0,0,121,122,5,110,0,0,122,123,
        5,115,0,0,123,124,5,116,0,0,124,30,1,0,0,0,125,126,5,61,0,0,126,
        32,1,0,0,0,127,129,5,42,0,0,128,127,1,0,0,0,129,130,1,0,0,0,130,
        128,1,0,0,0,130,131,1,0,0,0,131,132,1,0,0,0,132,133,3,35,17,0,133,
        34,1,0,0,0,134,136,7,4,0,0,135,134,1,0,0,0,136,140,1,0,0,0,137,139,
        7,5,0,0,138,137,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,0,140,141,
        1,0,0,0,141,36,1,0,0,0,142,140,1,0,0,0,143,144,5,116,0,0,144,145,
        5,114,0,0,145,146,5,117,0,0,146,168,5,101,0,0,147,148,5,102,0,0,
        148,149,5,97,0,0,149,150,5,108,0,0,150,151,5,115,0,0,151,168,5,101,
        0,0,152,154,3,47,23,0,153,152,1,0,0,0,154,155,1,0,0,0,155,153,1,
        0,0,0,155,156,1,0,0,0,156,163,1,0,0,0,157,159,7,6,0,0,158,160,3,
        47,23,0,159,158,1,0,0,0,160,161,1,0,0,0,161,159,1,0,0,0,161,162,
        1,0,0,0,162,164,1,0,0,0,163,157,1,0,0,0,163,164,1,0,0,0,164,168,
        1,0,0,0,165,168,3,39,19,0,166,168,3,41,20,0,167,143,1,0,0,0,167,
        147,1,0,0,0,167,153,1,0,0,0,167,165,1,0,0,0,167,166,1,0,0,0,168,
        38,1,0,0,0,169,173,5,39,0,0,170,172,9,0,0,0,171,170,1,0,0,0,172,
        175,1,0,0,0,173,174,1,0,0,0,173,171,1,0,0,0,174,176,1,0,0,0,175,
        173,1,0,0,0,176,177,5,39,0,0,177,40,1,0,0,0,178,182,5,34,0,0,179,
        181,9,0,0,0,180,179,1,0,0,0,181,184,1,0,0,0,182,183,1,0,0,0,182,
        180,1,0,0,0,183,185,1,0,0,0,184,182,1,0,0,0,185,186,5,34,0,0,186,
        42,1,0,0,0,187,188,5,47,0,0,188,189,5,47,0,0,189,193,1,0,0,0,190,
        192,8,7,0,0,191,190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,
        194,1,0,0,0,194,196,1,0,0,0,195,193,1,0,0,0,196,197,7,7,0,0,197,
        44,1,0,0,0,198,199,5,47,0,0,199,200,5,42,0,0,200,204,1,0,0,0,201,
        203,9,0,0,0,202,201,1,0,0,0,203,206,1,0,0,0,204,205,1,0,0,0,204,
        202,1,0,0,0,205,207,1,0,0,0,206,204,1,0,0,0,207,208,5,42,0,0,208,
        209,5,47,0,0,209,46,1,0,0,0,210,211,7,8,0,0,211,48,1,0,0,0,212,214,
        7,9,0,0,213,212,1,0,0,0,214,215,1,0,0,0,215,213,1,0,0,0,215,216,
        1,0,0,0,216,217,1,0,0,0,217,218,6,24,0,0,218,50,1,0,0,0,19,0,73,
        79,84,89,102,130,135,138,140,155,161,163,167,173,182,193,204,215,
        1,6,0,0
    ]

class CLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    COMPOPS = 5
    LOGICOPS = 6
    TYPE = 7
    TERMOPS = 8
    FACTOROPS = 9
    UNARYOPS = 10
    SPECIALUNARY = 11
    INT = 12
    CHAR = 13
    FLOAT = 14
    CONST = 15
    EQUALS = 16
    POINTER = 17
    IDENTIFIER = 18
    LITERAL = 19
    SINGLESTRING = 20
    DOUBLESTRING = 21
    SINGLECOMMENT = 22
    MULTICOMMENT = 23
    DIGIT = 24
    WS = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'printf'", "'('", "')'", "'int'", "'char'", "'float'", 
            "'const'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "COMPOPS", "LOGICOPS", "TYPE", "TERMOPS", "FACTOROPS", "UNARYOPS", 
            "SPECIALUNARY", "INT", "CHAR", "FLOAT", "CONST", "EQUALS", "POINTER", 
            "IDENTIFIER", "LITERAL", "SINGLESTRING", "DOUBLESTRING", "SINGLECOMMENT", 
            "MULTICOMMENT", "DIGIT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "COMPOPS", "LOGICOPS", 
                  "TYPE", "TERMOPS", "FACTOROPS", "UNARYOPS", "SPECIALUNARY", 
                  "INT", "CHAR", "FLOAT", "CONST", "EQUALS", "POINTER", 
                  "IDENTIFIER", "LITERAL", "SINGLESTRING", "DOUBLESTRING", 
                  "SINGLECOMMENT", "MULTICOMMENT", "DIGIT", "WS" ]

    grammarFileName = "C.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


