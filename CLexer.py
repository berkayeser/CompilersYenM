# Generated from C.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,29,220,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,3,6,79,8,6,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,3,7,90,8,7,1,8,1,8,1,8,1,8,3,8,96,8,8,1,9,
        1,9,1,9,3,9,101,8,9,1,9,5,9,104,8,9,10,9,12,9,107,9,9,1,10,1,10,
        1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,3,13,119,8,13,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,4,19,145,8,19,11,19,
        12,19,146,1,19,1,19,1,20,3,20,152,8,20,1,20,5,20,155,8,20,10,20,
        12,20,158,9,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,
        1,22,1,23,1,23,5,23,173,8,23,10,23,12,23,176,9,23,1,23,1,23,1,24,
        1,24,5,24,182,8,24,10,24,12,24,185,9,24,1,24,1,24,1,25,1,25,1,25,
        1,25,5,25,193,8,25,10,25,12,25,196,9,25,1,25,1,25,1,26,1,26,1,26,
        1,26,5,26,204,8,26,10,26,12,26,207,9,26,1,26,1,26,1,26,1,27,1,27,
        1,28,4,28,215,8,28,11,28,12,28,216,1,28,1,28,3,174,183,205,0,29,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,1,0,9,2,0,60,60,62,62,3,0,33,33,38,
        38,45,45,2,0,43,43,45,45,3,0,37,37,42,42,47,47,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,1,0,48,57,3,0,9,
        10,13,13,32,32,236,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,1,59,1,0,0,0,3,61,1,0,0,0,5,68,1,0,0,0,7,70,1,0,0,0,9,72,1,0,0,
        0,11,74,1,0,0,0,13,78,1,0,0,0,15,89,1,0,0,0,17,95,1,0,0,0,19,100,
        1,0,0,0,21,108,1,0,0,0,23,110,1,0,0,0,25,112,1,0,0,0,27,118,1,0,
        0,0,29,120,1,0,0,0,31,124,1,0,0,0,33,129,1,0,0,0,35,135,1,0,0,0,
        37,141,1,0,0,0,39,144,1,0,0,0,41,151,1,0,0,0,43,159,1,0,0,0,45,164,
        1,0,0,0,47,170,1,0,0,0,49,179,1,0,0,0,51,188,1,0,0,0,53,199,1,0,
        0,0,55,211,1,0,0,0,57,214,1,0,0,0,59,60,5,59,0,0,60,2,1,0,0,0,61,
        62,5,112,0,0,62,63,5,114,0,0,63,64,5,105,0,0,64,65,5,110,0,0,65,
        66,5,116,0,0,66,67,5,102,0,0,67,4,1,0,0,0,68,69,5,40,0,0,69,6,1,
        0,0,0,70,71,5,41,0,0,71,8,1,0,0,0,72,73,5,44,0,0,73,10,1,0,0,0,74,
        75,5,46,0,0,75,12,1,0,0,0,76,79,3,17,8,0,77,79,3,15,7,0,78,76,1,
        0,0,0,78,77,1,0,0,0,79,14,1,0,0,0,80,90,7,0,0,0,81,82,5,60,0,0,82,
        90,5,61,0,0,83,84,5,62,0,0,84,90,5,61,0,0,85,86,5,61,0,0,86,90,5,
        61,0,0,87,88,5,33,0,0,88,90,5,61,0,0,89,80,1,0,0,0,89,81,1,0,0,0,
        89,83,1,0,0,0,89,85,1,0,0,0,89,87,1,0,0,0,90,16,1,0,0,0,91,92,5,
        38,0,0,92,96,5,38,0,0,93,94,5,124,0,0,94,96,5,124,0,0,95,91,1,0,
        0,0,95,93,1,0,0,0,96,18,1,0,0,0,97,101,3,29,14,0,98,101,3,31,15,
        0,99,101,3,33,16,0,100,97,1,0,0,0,100,98,1,0,0,0,100,99,1,0,0,0,
        101,105,1,0,0,0,102,104,5,42,0,0,103,102,1,0,0,0,104,107,1,0,0,0,
        105,103,1,0,0,0,105,106,1,0,0,0,106,20,1,0,0,0,107,105,1,0,0,0,108,
        109,7,1,0,0,109,22,1,0,0,0,110,111,7,2,0,0,111,24,1,0,0,0,112,113,
        7,3,0,0,113,26,1,0,0,0,114,115,5,43,0,0,115,119,5,43,0,0,116,117,
        5,45,0,0,117,119,5,45,0,0,118,114,1,0,0,0,118,116,1,0,0,0,119,28,
        1,0,0,0,120,121,5,105,0,0,121,122,5,110,0,0,122,123,5,116,0,0,123,
        30,1,0,0,0,124,125,5,99,0,0,125,126,5,104,0,0,126,127,5,97,0,0,127,
        128,5,114,0,0,128,32,1,0,0,0,129,130,5,102,0,0,130,131,5,108,0,0,
        131,132,5,111,0,0,132,133,5,97,0,0,133,134,5,116,0,0,134,34,1,0,
        0,0,135,136,5,99,0,0,136,137,5,111,0,0,137,138,5,110,0,0,138,139,
        5,115,0,0,139,140,5,116,0,0,140,36,1,0,0,0,141,142,5,61,0,0,142,
        38,1,0,0,0,143,145,5,42,0,0,144,143,1,0,0,0,145,146,1,0,0,0,146,
        144,1,0,0,0,146,147,1,0,0,0,147,148,1,0,0,0,148,149,3,41,20,0,149,
        40,1,0,0,0,150,152,7,4,0,0,151,150,1,0,0,0,152,156,1,0,0,0,153,155,
        7,5,0,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,
        1,0,0,0,157,42,1,0,0,0,158,156,1,0,0,0,159,160,5,116,0,0,160,161,
        5,114,0,0,161,162,5,117,0,0,162,163,5,101,0,0,163,44,1,0,0,0,164,
        165,5,102,0,0,165,166,5,97,0,0,166,167,5,108,0,0,167,168,5,115,0,
        0,168,169,5,101,0,0,169,46,1,0,0,0,170,174,5,39,0,0,171,173,9,0,
        0,0,172,171,1,0,0,0,173,176,1,0,0,0,174,175,1,0,0,0,174,172,1,0,
        0,0,175,177,1,0,0,0,176,174,1,0,0,0,177,178,5,39,0,0,178,48,1,0,
        0,0,179,183,5,34,0,0,180,182,9,0,0,0,181,180,1,0,0,0,182,185,1,0,
        0,0,183,184,1,0,0,0,183,181,1,0,0,0,184,186,1,0,0,0,185,183,1,0,
        0,0,186,187,5,34,0,0,187,50,1,0,0,0,188,189,5,47,0,0,189,190,5,47,
        0,0,190,194,1,0,0,0,191,193,8,6,0,0,192,191,1,0,0,0,193,196,1,0,
        0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,197,1,0,0,0,196,194,1,0,
        0,0,197,198,7,6,0,0,198,52,1,0,0,0,199,200,5,47,0,0,200,201,5,42,
        0,0,201,205,1,0,0,0,202,204,9,0,0,0,203,202,1,0,0,0,204,207,1,0,
        0,0,205,206,1,0,0,0,205,203,1,0,0,0,206,208,1,0,0,0,207,205,1,0,
        0,0,208,209,5,42,0,0,209,210,5,47,0,0,210,54,1,0,0,0,211,212,7,7,
        0,0,212,56,1,0,0,0,213,215,7,8,0,0,214,213,1,0,0,0,215,216,1,0,0,
        0,216,214,1,0,0,0,216,217,1,0,0,0,217,218,1,0,0,0,218,219,6,28,0,
        0,219,58,1,0,0,0,16,0,78,89,95,100,105,118,146,151,154,156,174,183,
        194,205,216,1,6,0,0
    ]

class CLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    BOOLOPS = 7
    COMPOPS = 8
    LOGICOPS = 9
    TYPE = 10
    UNARYOPS = 11
    TERMOPS = 12
    FACTOROPS = 13
    SPECIALUNARY = 14
    INT = 15
    CHAR = 16
    FLOAT = 17
    CONST = 18
    EQUALS = 19
    POINTER = 20
    IDENTIFIER = 21
    TRUE = 22
    FALSE = 23
    SINGLESTRING = 24
    DOUBLESTRING = 25
    SINGLECOMMENT = 26
    MULTICOMMENT = 27
    DIGIT = 28
    WS = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'printf'", "'('", "')'", "','", "'.'", "'int'", "'char'", 
            "'float'", "'const'", "'='", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "BOOLOPS", "COMPOPS", "LOGICOPS", "TYPE", "UNARYOPS", "TERMOPS", 
            "FACTOROPS", "SPECIALUNARY", "INT", "CHAR", "FLOAT", "CONST", 
            "EQUALS", "POINTER", "IDENTIFIER", "TRUE", "FALSE", "SINGLESTRING", 
            "DOUBLESTRING", "SINGLECOMMENT", "MULTICOMMENT", "DIGIT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "BOOLOPS", 
                  "COMPOPS", "LOGICOPS", "TYPE", "UNARYOPS", "TERMOPS", 
                  "FACTOROPS", "SPECIALUNARY", "INT", "CHAR", "FLOAT", "CONST", 
                  "EQUALS", "POINTER", "IDENTIFIER", "TRUE", "FALSE", "SINGLESTRING", 
                  "DOUBLESTRING", "SINGLECOMMENT", "MULTICOMMENT", "DIGIT", 
                  "WS" ]

    grammarFileName = "C.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


